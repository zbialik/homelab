-- MySQL Script generated by MySQL Workbench
-- Fri Nov 17 19:06:42 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema grant-and-program-tracking
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema grant-and-program-tracking
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `grant-and-program-tracking` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `grant-and-program-tracking` ;

-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`FUNDING_ORGANIZATION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`FUNDING_ORGANIZATION` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (
  `funding_organization_id` INT NOT NULL AUTO_INCREMENT,
  `funding_organization_name` VARCHAR(45) NOT NULL,
  `funding_organization_description` VARCHAR(350) NULL,
  PRIMARY KEY (`funding_organization_id`),
  UNIQUE INDEX `funding_organization_id_UNIQUE` (`funding_organization_id` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`GRANT_OPPORTUNITY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`GRANT_OPPORTUNITY` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (
  `grant_opportunity_id` INT NOT NULL AUTO_INCREMENT,
  `grant_opportunity_name` VARCHAR(45) NOT NULL,
  `grant_opportunity_submission_deadline` DATETIME NOT NULL,
  `grant_opportunity_description` VARCHAR(350) NULL,
  `grant_opportunity_fund_amount` DECIMAL(10,2) NULL,
  `funding_organization_id` INT NOT NULL,
  PRIMARY KEY (`grant_opportunity_id`),
  INDEX `fk_GRANT_OPPORTUNITY_FUNDING_ORGANIZATION1_idx` (`funding_organization_id` ASC) VISIBLE,
  UNIQUE INDEX `grant_opportunity_id_UNIQUE` (`grant_opportunity_id` ASC) VISIBLE,
  CONSTRAINT `fk_GRANT_OPPORTUNITY_FUNDING_ORGANIZATION1`
    FOREIGN KEY (`funding_organization_id`)
    REFERENCES `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`GRANT_APPLICATION`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION` (
  `grant_application_id` INT NOT NULL AUTO_INCREMENT,
  `grant_opportunity_id` INT NOT NULL,
  `app_fund_requested` DECIMAL(10,2) NOT NULL,
  `app_status` VARCHAR(45) CHECK (`app_status` IN ('todo', 'in progress', 'awarded', 'cancelled', 'submitted', 'rejected' )) NOT NULL,
  `app_planned_submission_date` DATETIME NOT NULL,
  `app_actual_submission_date` DATETIME NULL,
  PRIMARY KEY (`grant_application_id`, `grant_opportunity_id`),
  INDEX `fk_GRANT_APPLICATION_GRANT_OPPORTUNITY2_idx` (`grant_opportunity_id` ASC) VISIBLE,
  UNIQUE INDEX `grant_application_id_UNIQUE` (`grant_application_id` ASC) VISIBLE,
  UNIQUE INDEX `grant_opportunity_id_UNIQUE` (`grant_opportunity_id` ASC) VISIBLE,
  CONSTRAINT `fk_GRANT_APPLICATION_GRANT_OPPORTUNITY1`
    FOREIGN KEY (`grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`GRANT_AWARD`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`GRANT_AWARD` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`GRANT_AWARD` (
  `grant_award_id` INT NOT NULL AUTO_INCREMENT,
  `funding_organization_id` INT NOT NULL,
  `fund_awarded` DECIMAL(10,2) NOT NULL,
  `award_date` DATETIME NOT NULL,
  `grant_application_id` INT NULL,
  `grant_opportunity_id` INT NULL,
  PRIMARY KEY (`grant_award_id`),
  INDEX `fk_GRANT_AWARD_ORGANIZATION1_idx` (`funding_organization_id` ASC) VISIBLE,
  INDEX `fk_GRANT_AWARD_GRANT_APPLICATION1_idx` (`grant_application_id` ASC, `grant_opportunity_id` ASC) VISIBLE,
  UNIQUE INDEX `grant_award_id_UNIQUE` (`grant_award_id` ASC) VISIBLE,
  CONSTRAINT `fk_GRANT_AWARD_ORGANIZATION1`
    FOREIGN KEY (`funding_organization_id`)
    REFERENCES `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,
  CONSTRAINT `fk_GRANT_AWARD_GRANT_APPLICATION1`
    FOREIGN KEY (`grant_application_id` , `grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id` , `grant_opportunity_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`PROGRAM`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`PROGRAM` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`PROGRAM` (
  `program_id` INT NOT NULL AUTO_INCREMENT,
  `program_name` VARCHAR(45) NOT NULL,
  `program_description` VARCHAR(350) NULL,
  `program_status` VARCHAR(45) CHECK (`program_status` IN ('active', 'inactive')) NOT NULL,
  PRIMARY KEY (`program_id`),
  UNIQUE INDEX `program_id_UNIQUE` (`program_id` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`APPLICATION_DELIVERABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (
  `app_deliverable_id` INT NOT NULL AUTO_INCREMENT,
  `app_deliverable_description` VARCHAR(350) NOT NULL,
  `app_deliverable_status` VARCHAR(45) CHECK (`app_deliverable_status` IN ('todo', 'completed', 'blocked', 'in progress')) NOT NULL,
  `app_deliverable_planned_completion_date` DATETIME NOT NULL,
  `app_deliverable_actual_completion_date` DATETIME NULL,
  `grant_application_id` INT NOT NULL,
  `grant_opportunity_id` INT NOT NULL,
  PRIMARY KEY (`app_deliverable_id`, `grant_application_id`, `grant_opportunity_id`),
  UNIQUE INDEX `app_deliverable_id_UNIQUE` (`app_deliverable_id` ASC) VISIBLE,
  INDEX `fk_APPLICATION_DELIVERABLE_GRANT_APPLICATION2_idx` (`grant_application_id` ASC, `grant_opportunity_id` ASC) VISIBLE,
  CONSTRAINT `fk_APPLICATION_DELIVERABLE_GRANT_APPLICATION2`
    FOREIGN KEY (`grant_application_id` , `grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id` , `grant_opportunity_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`PROGRAM_EXPENDITURE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (
  `program_expenditure_id` INT NOT NULL,
  `program_expenditure_amount` DECIMAL(10,2) NOT NULL,
  `program_expenditure_description` VARCHAR(350) NULL,
  `program_expenditure_date` VARCHAR(45) NOT NULL,
  `program_id` INT NOT NULL,
  PRIMARY KEY (`program_expenditure_id`),
  INDEX `fk_PROGRAM_EXPENDITURE_PROGRAM1_idx` (`program_id` ASC) VISIBLE,
  UNIQUE INDEX `program_expenditure_id_UNIQUE` (`program_expenditure_id` ASC) VISIBLE,
  CONSTRAINT `fk_PROGRAM_EXPENDITURE_PROGRAM1`
    FOREIGN KEY (`program_id`)
    REFERENCES `grant-and-program-tracking`.`PROGRAM` (`program_id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`STAKEHOLDER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`STAKEHOLDER` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`STAKEHOLDER` (
  `stakeholder_id` INT NOT NULL AUTO_INCREMENT,
  `stateholder_name` VARCHAR(45) NULL,
  `stakeholder_role` VARCHAR(45) NULL,
  PRIMARY KEY (`stakeholder_id`),
  UNIQUE INDEX `stakeholder_id_UNIQUE` (`stakeholder_id` ASC) VISIBLE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (
  `stakeholder_id` INT NOT NULL,
  `grant_application_id` INT NOT NULL,
  `grant_opportunity_id` INT NOT NULL,
  PRIMARY KEY (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`),
  INDEX `fk_APPLICATION_INTERNAL_STAKEHOLDER_INTERNAL_STAKEHOLDER1_idx` (`stakeholder_id` ASC) VISIBLE,
  INDEX `fk_APPLICATION_STAKEHOLDER_GRANT_APPLICATION1_idx` (`grant_application_id` ASC, `grant_opportunity_id` ASC) VISIBLE,
  CONSTRAINT `fk_APPLICATION_INTERNAL_STAKEHOLDER_INTERNAL_STAKEHOLDER1`
    FOREIGN KEY (`stakeholder_id`)
    REFERENCES `grant-and-program-tracking`.`STAKEHOLDER` (`stakeholder_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_APPLICATION_STAKEHOLDER_GRANT_APPLICATION1`
    FOREIGN KEY (`grant_application_id` , `grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id` , `grant_opportunity_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`GRANT_DISBURSEMENT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`GRANT_DISBURSEMENT` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (
  `grant_disbursement_id` INT NOT NULL AUTO_INCREMENT,
  `grant_disbursement_date` DATETIME NOT NULL,
  `grant_disbursement_amount` DECIMAL(10,2) NOT NULL,
  `grant_award_id` INT NOT NULL,
  PRIMARY KEY (`grant_disbursement_id`, `grant_award_id`),
  INDEX `fk_GRANT_DISBURSEMENT_GRANT_AWARD1_idx` (`grant_award_id` ASC) VISIBLE,
  UNIQUE INDEX `grant_disbursement_id_UNIQUE` (`grant_disbursement_id` ASC) VISIBLE,
  CONSTRAINT `fk_GRANT_DISBURSEMENT_GRANT_AWARD1`
    FOREIGN KEY (`grant_award_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`)
    ON DELETE RESTRICT
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`CONTRACT`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`CONTRACT` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`CONTRACT` (
  `contract_id` INT NOT NULL AUTO_INCREMENT,
  `start_date` DATETIME NULL,
  `end_date` DATETIME NULL,
  `grant_award_id` INT NULL,
  UNIQUE INDEX `contract_id_UNIQUE` (`contract_id` ASC) VISIBLE,
  INDEX `fk_CONTRACT_GRANT_AWARD1_idx` (`grant_award_id` ASC) VISIBLE,
  PRIMARY KEY (`contract_id`),
  CONSTRAINT `fk_CONTRACT_GRANT_AWARD1`
    FOREIGN KEY (`grant_award_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`APP_DELIVERABLE_CHANGE_HISTORY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`APP_DELIVERABLE_CHANGE_HISTORY` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`APP_DELIVERABLE_CHANGE_HISTORY` (
  `change_id` INT NOT NULL AUTO_INCREMENT,
  `change_timestamp` DATETIME NOT NULL,
  `row_snapshot_serialized` JSON NOT NULL,
  `changed_by` VARCHAR(45) NOT NULL,
  `change_description` VARCHAR(350) NULL,
  `app_deliverable_id` INT NOT NULL,
  `grant_application_id` INT NOT NULL,
  `grant_opportunity_id` INT NOT NULL,
  PRIMARY KEY (`change_id`, `app_deliverable_id`, `grant_application_id`, `grant_opportunity_id`),
  UNIQUE INDEX `change_id_UNIQUE` (`change_id` ASC) VISIBLE,
  INDEX `fk_APP_DELIVERABLE_CHANGE_HISTORY_APPLICATION_DELIVERABLE1_idx` (`app_deliverable_id` ASC, `grant_application_id` ASC, `grant_opportunity_id` ASC) VISIBLE,
  CONSTRAINT `fk_APP_DELIVERABLE_CHANGE_HISTORY_APPLICATION_DELIVERABLE1`
    FOREIGN KEY (`app_deliverable_id` , `grant_application_id` , `grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id` , `grant_application_id` , `grant_opportunity_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`PROGRAM_DELIVERABLE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (
  `program_deliverable_id` INT NOT NULL AUTO_INCREMENT,
  `program_deliverable_type` VARCHAR(45) NOT NULL,
  `program_deliverable_status` VARCHAR(45) CHECK (`program_deliverable_status` IN ('todo', 'completed', 'blocked', 'in progress')) NOT NULL,
  `program_deliverable_due_date` DATETIME NOT NULL,
  `program_deliverable_description` VARCHAR(350) NULL,
  `program_deliverable_completion_date` DATETIME NULL,
  `program_id` INT NOT NULL,
  `contract_id` INT NOT NULL,
  PRIMARY KEY (`program_deliverable_id`, `program_id`, `contract_id`),
  INDEX `fk_PROGRAM_DELIVERABLE_PROGRAM1_idx` (`program_id` ASC) VISIBLE,
  INDEX `fk_PROGRAM_DELIVERABLE_CONTRACT1_idx` (`contract_id` ASC) VISIBLE,
  CONSTRAINT `fk_PROGRAM_DELIVERABLE_PROGRAM1`
    FOREIGN KEY (`program_id`)
    REFERENCES `grant-and-program-tracking`.`PROGRAM` (`program_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_PROGRAM_DELIVERABLE_CONTRACT1`
    FOREIGN KEY (`contract_id`)
    REFERENCES `grant-and-program-tracking`.`CONTRACT` (`contract_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_CHANGE_HISTORY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_CHANGE_HISTORY` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_CHANGE_HISTORY` (
  `change_id` INT NOT NULL AUTO_INCREMENT,
  `change_timestamp` DATETIME NOT NULL,
  `row_snapshot_serialized` JSON NOT NULL,
  `changed_by` VARCHAR(45) NOT NULL,
  `change_description` VARCHAR(350) NULL,
  `program_deliverable_id` INT NOT NULL,
  `program_id` INT NOT NULL,
  `contract_id` INT NOT NULL,
  PRIMARY KEY (`change_id`, `program_deliverable_id`, `program_id`, `contract_id`),
  UNIQUE INDEX `change_id_UNIQUE` (`change_id` ASC) VISIBLE,
  INDEX `fk_PROGRAM_DELIVERABLE_CHANGE_HISTORY_PROGRAM_DELIVERABLE1_idx` (`program_deliverable_id` ASC, `program_id` ASC, `contract_id` ASC) VISIBLE,
  CONSTRAINT `fk_PROGRAM_DELIVERABLE_CHANGE_HISTORY_PROGRAM_DELIVERABLE1`
    FOREIGN KEY (`program_deliverable_id` , `program_id` , `contract_id`)
    REFERENCES `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id` , `program_id` , `contract_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);


-- -----------------------------------------------------
-- Table `grant-and-program-tracking`.`APP_CHANGE_HISTORY`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `grant-and-program-tracking`.`APP_CHANGE_HISTORY` ;

CREATE TABLE IF NOT EXISTS `grant-and-program-tracking`.`APP_CHANGE_HISTORY` (
  `change_id` INT NOT NULL AUTO_INCREMENT,
  `change_timestamp` DATETIME NOT NULL,
  `row_snapshot_serialized` JSON NOT NULL,
  `changed_by` VARCHAR(45) NOT NULL,
  `change_description` VARCHAR(350) NULL,
  `grant_application_id` INT NOT NULL,
  `grant_opportunity_id` INT NOT NULL,
  PRIMARY KEY (`change_id`, `grant_application_id`, `grant_opportunity_id`),
  INDEX `fk_APP_CHANGE_HISTORY_GRANT_APPLICATION1_idx` (`grant_application_id` ASC, `grant_opportunity_id` ASC) VISIBLE,
  UNIQUE INDEX `change_id_UNIQUE` (`change_id` ASC) VISIBLE,
  CONSTRAINT `fk_APP_CHANGE_HISTORY_GRANT_APPLICATION1`
    FOREIGN KEY (`grant_application_id` , `grant_opportunity_id`)
    REFERENCES `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id` , `grant_opportunity_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE);

USE `grant-and-program-tracking` ;

-- -----------------------------------------------------
-- function CheckSubmissionDate
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP function IF EXISTS `grant-and-program-tracking`.`CheckSubmissionDate`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE FUNCTION CheckSubmissionDate(grantAppId INT, plannedDate DATETIME) RETURNS INT DETERMINISTIC
BEGIN
    DECLARE deadline DATETIME;

    SELECT grant_opportunity_submission_deadline INTO deadline
    FROM GRANT_OPPORTUNITY
    WHERE grant_opportunity_id = grantAppId;

    -- Compare the planned submission date with the deadline
    IF plannedDate <= deadline THEN
        RETURN 1; -- True: The planned date is before the deadline
    ELSE
        RETURN 0; -- False: The planned date is after the deadline
    END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RestoreGrantApplication
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP procedure IF EXISTS `grant-and-program-tracking`.`RestoreGrantApplication`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE PROCEDURE RestoreGrantApplication (IN changeId INT)
BEGIN
    -- Declare variables to hold JSON data and the primary key of the GRANT_APPLICATION row
    DECLARE jsonData JSON;
    DECLARE appPrimaryKey INT;

    -- Select the serialized row snapshot from the APP_CHANGE_HISTORY table
	SELECT 
		row_snapshot_serialized
	INTO jsonData FROM
		APP_CHANGE_HISTORY
	WHERE
		change_id = changeId;

    -- Extract the primary key (or other unique identifier) from the JSON object
    SET appPrimaryKey = 
		JSON_UNQUOTE(JSON_EXTRACT(jsonData, '$.grant_application_id'));

    -- Update the GRANT_APPLICATION table row with the JSON data
UPDATE GRANT_APPLICATION 
SET 
    app_fund_requested = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(jsonData, '$.app_fund_requested')),
            'null'),
    app_status = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(jsonData, '$.app_status')),
            'null'),
    app_actual_submission_date = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(jsonData, '$.app_actual_submission_date')),
            'null'),
    app_planned_submission_date = NULLIF(JSON_UNQUOTE(JSON_EXTRACT(jsonData,
                            '$.app_planned_submission_date')),
            'null')
WHERE
    grant_application_id = appPrimaryKey;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function CheckProgramDeliverableDueDate
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP function IF EXISTS `grant-and-program-tracking`.`CheckProgramDeliverableDueDate`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE FUNCTION CheckProgramDeliverableDueDate(contractId INT, plannedDate DATETIME) RETURNS INT DETERMINISTIC
BEGIN
    DECLARE startDate DATETIME;
    DECLARE endDate DATETIME;

    SELECT start_date INTO startDate
    FROM CONTRACT
    WHERE contract_id = contractId;

    SELECT end_date INTO endDate
    FROM CONTRACT
    WHERE contract_id = contractId;
    
    IF startDate IS NULL AND endDate IS NULL THEN
		RETURN 1; -- bypass check if no active contract dates are set
	ELSEIF startDate IS NULL THEN
		IF plannedDate <= endDate THEN -- only check endDate
			RETURN 1;
		ELSE
			RETURN 0;
		END IF;
	ELSEIF endDate IS NULL THEN
		IF plannedDate >= startDate THEN -- only check startDate
			RETURN 1;
		ELSE
			RETURN 0;
		END IF;
	ELSE
		-- Compare the planned due date with the contract timerange
		IF plannedDate >= startDate AND plannedDate <= endDate THEN
			RETURN 1; -- True: The planned date is within the contract timerange
		ELSE
			RETURN 0; -- False: The planned date is within the contract timerange
		END IF;
    END IF;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure RemoveGrantAward
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP procedure IF EXISTS `grant-and-program-tracking`.`RemoveGrantAward`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE PROCEDURE RemoveGrantAward(IN awardId INT)
BEGIN
    -- Deleting related grant disbursements
    DELETE FROM GRANT_DISBURSEMENT WHERE grant_award_id = awardId;

    -- Deleting related program deliverables
    DELETE pd FROM PROGRAM_DELIVERABLE as pd
    INNER JOIN CONTRACT c ON pd.contract_id = c.contract_id
    WHERE c.grant_award_id = awardId;

    -- Deleting related contract records
    DELETE FROM CONTRACT WHERE grant_award_id = awardId;

    -- Now delete the grant award itself
    DELETE FROM GRANT_AWARD WHERE grant_award_id = awardId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure AwardGrant
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP procedure IF EXISTS `grant-and-program-tracking`.`AwardGrant`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE PROCEDURE AwardGrant (IN appId INT, IN fundAwarded DECIMAL(10,2), IN awardDate DATE)
BEGIN
	DECLARE fundOrgId INT;
	DECLARE opportunityId INT;

	-- Update the GRANT_APPLICATION table row status
	UPDATE GRANT_APPLICATION 
	SET app_status = 'awarded'
	WHERE grant_application_id = appId;
	
    -- set 
	SET opportunityId = (
		SELECT grant_opportunity_id
		FROM GRANT_APPLICATION
		WHERE grant_application_id = appId
	);

	-- Identify funding orgId for this grant app
	SELECT 
    funding_organization_id
	INTO fundOrgId 
    FROM GRANT_OPPORTUNITY
	WHERE grant_opportunity_id = opportunityId;

	-- Insert new GRANT_AWARD table row
	INSERT INTO GRANT_AWARD (
		fund_awarded,
		funding_organization_id,
        award_date,
		grant_application_id,
        grant_opportunity_id)
	VALUES (
		fundAwarded,
		fundOrgId,
        awardDate,
		appId,
        opportunityId
	);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetNextDueApplication
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP function IF EXISTS `grant-and-program-tracking`.`GetNextDueApplication`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE FUNCTION GetNextDueApplication() RETURNS INT DETERMINISTIC
BEGIN
    DECLARE nextAppId INT;

    SELECT grant_application_id INTO nextAppId
    FROM GRANT_APPLICATION
    WHERE 
		app_planned_submission_date > NOW() AND
        app_status != 'awarded' AND
        app_status != 'submitted'
    ORDER BY app_planned_submission_date ASC
    LIMIT 1;

    RETURN nextAppId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetSubmissionProportion
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP function IF EXISTS `grant-and-program-tracking`.`GetSubmissionProportion`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE FUNCTION GetSubmissionProportion(startTime DATETIME, endTime DATETIME) RETURNS DECIMAL(10,4) DETERMINISTIC
BEGIN
    DECLARE totalOpportunities INT;
    DECLARE totalSubmissions INT;
    DECLARE proportion DECIMAL(10,4);

    -- Get the total number of grant opportunities within the time range
    SELECT COUNT(*)
    INTO totalOpportunities
    FROM GRANT_OPPORTUNITY
    WHERE grant_opportunity_submission_deadline BETWEEN startTime AND endTime;

    -- Get the total number of submitted applications within the time range
    SELECT COUNT(*)
    INTO totalSubmissions
    FROM GRANT_APPLICATION as ga
    INNER JOIN GRANT_OPPORTUNITY AS go ON ga.grant_opportunity_id = go.grant_opportunity_id
    WHERE go.grant_opportunity_submission_deadline BETWEEN startTime AND endTime
      AND ga.app_actual_submission_date IS NOT NULL
      AND ga.app_actual_submission_date BETWEEN startTime AND endTime;

    -- Calculate the proportion
    IF totalOpportunities = 0 THEN
        SET proportion = 0;
    ELSE
        SET proportion = totalSubmissions / totalOpportunities;
    END IF;

    RETURN proportion;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- function GetAwardProportion
-- -----------------------------------------------------

USE `grant-and-program-tracking`;
DROP function IF EXISTS `grant-and-program-tracking`.`GetAwardProportion`;

DELIMITER $$
USE `grant-and-program-tracking`$$
CREATE FUNCTION GetAwardProportion(startTime DATETIME, endTime DATETIME) RETURNS DECIMAL(10,4) DETERMINISTIC
BEGIN
    DECLARE totalSubmissions INT;
    DECLARE totalAwarded INT;
    DECLARE proportion DECIMAL(10,4);

    -- Get the total number of submitted applications within the time range
    SELECT COUNT(*)
    INTO totalSubmissions
    FROM GRANT_APPLICATION
    WHERE app_actual_submission_date BETWEEN startTime AND endTime;

    -- Get the total number of awarded applications within the time range
    SELECT COUNT(*)
    INTO totalAwarded
    FROM GRANT_APPLICATION
    WHERE 
		app_status = 'awarded' AND
		app_actual_submission_date BETWEEN startTime AND endTime;

    -- Calculate the proportion
    IF totalSubmissions = 0 THEN
        SET proportion = 0;
    ELSE
        SET proportion = totalAwarded / totalSubmissions;
    END IF;

    RETURN proportion;
END;$$

DELIMITER ;
USE `grant-and-program-tracking`;

DELIMITER $$

USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION_BEFORE_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_APPLICATION_BEFORE_INSERT` BEFORE INSERT ON `GRANT_APPLICATION` FOR EACH ROW
BEGIN
    IF CheckSubmissionDate(NEW.grant_opportunity_id, NEW.app_planned_submission_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The planned submission date cannot be after the grant opportunity submission deadline.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION_AFTER_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_APPLICATION_AFTER_INSERT` AFTER INSERT ON `GRANT_APPLICATION` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = CONCAT('inserted new application ', NEW.grant_application_id);
	
    INSERT INTO APP_CHANGE_HISTORY (
		grant_application_id, grant_opportunity_id, change_timestamp,
        row_snapshot_serialized, changed_by, 
        change_description)
	VALUES (
		NEW.grant_application_id,
		NEW.grant_opportunity_id,
		NOW(),
		JSON_OBJECT(
			'grant_application_id', NEW.grant_application_id,
			'grant_opportunity_id', NEW.grant_opportunity_id,
			'app_fund_requested', NEW.app_fund_requested,
			'app_status', NEW.app_status,
			'app_actual_submission_date', NEW.app_actual_submission_date,
			'app_planned_submission_date', NEW.app_planned_submission_date
		), 
		USER(),
		change_desc
	);
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION_BEFORE_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_APPLICATION_BEFORE_UPDATE` BEFORE UPDATE ON `GRANT_APPLICATION` FOR EACH ROW
BEGIN
    IF CheckSubmissionDate(NEW.grant_opportunity_id, NEW.app_planned_submission_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The planned submission date cannot be after the grant opportunity submission deadline.';
    END IF;
END;$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_APPLICATION_AFTER_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_APPLICATION_AFTER_UPDATE` AFTER UPDATE ON `GRANT_APPLICATION` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = '';

	IF (NEW.app_fund_requested != OLD.app_fund_requested) THEN
		SET change_desc = CONCAT(change_desc, 
        'app requested fund changed from ', OLD.app_fund_requested, 
        ' to ', NEW.app_fund_requested, '; ');
	END IF;
	IF (NEW.app_status != OLD.app_status) THEN
		SET change_desc = CONCAT(change_desc, 'status changed from ', 
			OLD.app_status, ' to ', NEW.app_status, '; ');
	END IF;
    IF (NEW.app_actual_submission_date != OLD.app_actual_submission_date) THEN
        SET change_desc = CONCAT(change_desc, 'actual submission date changed from ', 
		 DATE_FORMAT(OLD.app_actual_submission_date, '%Y-%m-%d %H:%i:%s'), ' to ', 
         DATE_FORMAT(NEW.app_actual_submission_date, '%Y-%m-%d %H:%i:%s'), '; ');
    END IF;
    IF (NEW.app_planned_submission_date != OLD.app_planned_submission_date) THEN
        SET change_desc = CONCAT(change_desc, 'planned submission date changed from ', 
		 DATE_FORMAT(OLD.app_planned_submission_date, '%Y-%m-%d %H:%i:%s'), ' to ', 
         DATE_FORMAT(NEW.app_planned_submission_date, '%Y-%m-%d %H:%i:%s'), '; ');
    END IF;

	INSERT INTO APP_CHANGE_HISTORY (
		grant_application_id, grant_opportunity_id, change_timestamp,
        row_snapshot_serialized, changed_by, 
        change_description)
	VALUES (
		NEW.grant_application_id,
		NEW.grant_opportunity_id,
		NOW(),
		JSON_OBJECT(
			'grant_application_id', NEW.grant_application_id,
			'grant_opportunity_id', NEW.grant_opportunity_id,
			'app_fund_requested', NEW.app_fund_requested,
			'app_status', NEW.app_status,
			'app_actual_submission_date', NEW.app_actual_submission_date,
			'app_planned_submission_date', NEW.app_planned_submission_date
		), 
		USER(),
		change_desc
	);
END;$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_AFTER_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_AFTER_INSERT` AFTER INSERT ON `APPLICATION_DELIVERABLE` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = CONCAT('inserted new app deliverable ', NEW.app_deliverable_id);
    
	INSERT INTO APP_DELIVERABLE_CHANGE_HISTORY (app_deliverable_id, grant_application_id, grant_opportunity_id, change_timestamp, row_snapshot_serialized, changed_by, change_description)
	VALUES (
		NEW.app_deliverable_id,
		NEW.grant_application_id,
        NEW.grant_opportunity_id,
		NOW(),
		JSON_OBJECT(
			'app_deliverable_id', NEW.app_deliverable_id,
			'grant_application_id', NEW.grant_application_id,
			'grant_opportunity_id', NEW.grant_opportunity_id,
			'app_deliverable_description', NEW.app_deliverable_description,
			'app_deliverable_status', NEW.app_deliverable_status,
			'app_deliverable_planned_completion_date', NEW.app_deliverable_planned_completion_date,
			'app_deliverable_actual_completion_date', NEW.app_deliverable_actual_completion_date
		), 
		USER(), -- This function returns the current MySQL user. Replace with your mechanism if different.
		change_desc
	);
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_AFTER_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_AFTER_UPDATE` AFTER UPDATE ON `APPLICATION_DELIVERABLE` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = '';
    
	IF (NEW.app_deliverable_description != OLD.app_deliverable_description) THEN
		SET change_desc = CONCAT(change_desc, 'description changed from ', OLD.app_deliverable_description, ' to ', NEW.app_deliverable_description, '; ');
	END IF;
	IF (NEW.app_deliverable_status != OLD.app_deliverable_status) THEN
		SET change_desc = CONCAT(change_desc, 'status changed from ', OLD.app_deliverable_status, ' to ', NEW.app_deliverable_status, '; ');
	END IF;
    IF (NEW.app_deliverable_planned_completion_date != OLD.app_deliverable_planned_completion_date) THEN
        SET change_desc = CONCAT(change_desc, 
                                 'planned completion date changed from ', 
                                 DATE_FORMAT(OLD.app_deliverable_planned_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 ' to ', 
                                 DATE_FORMAT(NEW.app_deliverable_planned_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 '; ');
    END IF;
    IF (NEW.app_deliverable_actual_completion_date != OLD.app_deliverable_actual_completion_date) THEN
        SET change_desc = CONCAT(change_desc, 
                                 'actual completion date changed from ', 
                                 DATE_FORMAT(OLD.app_deliverable_actual_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 ' to ', 
                                 DATE_FORMAT(NEW.app_deliverable_actual_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 '; ');
    END IF;

	INSERT INTO APP_DELIVERABLE_CHANGE_HISTORY (app_deliverable_id, grant_application_id, change_timestamp, row_snapshot_serialized, changed_by, change_description)
	VALUES (
		NEW.app_deliverable_id,
		NEW.grant_application_id,
		NOW(),
		JSON_OBJECT(
			'app_deliverable_id', NEW.app_deliverable_id,
			'grant_application_id', NEW.grant_application_id,
			'app_deliverable_description', NEW.app_deliverable_description,
			'app_deliverable_status', NEW.app_deliverable_status,
			'app_deliverable_planned_completion_date', NEW.app_deliverable_planned_completion_date,
			'app_deliverable_actual_completion_date', NEW.app_deliverable_actual_completion_date
		), 
		USER(), -- This function returns the current MySQL user. Replace with your mechanism if different.
		change_desc
	);
END;$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_BEFORE_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_BEFORE_INSERT` BEFORE INSERT ON `APPLICATION_DELIVERABLE` FOR EACH ROW
BEGIN
    IF CheckSubmissionDate(NEW.grant_opportunity_id, NEW.app_deliverable_planned_completion_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The planned completion date cannot be after the grant opportunity submission deadline.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_BEFORE_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`APPLICATION_DELIVERABLE_BEFORE_UPDATE` BEFORE UPDATE ON `APPLICATION_DELIVERABLE` FOR EACH ROW
BEGIN
    IF CheckSubmissionDate(NEW.grant_opportunity_id, NEW.app_deliverable_planned_completion_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The planned completion date cannot be after the grant opportunity submission deadline.';
    END IF;
END;$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_DISBURSEMENT_BEFORE_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_DISBURSEMENT_BEFORE_INSERT` BEFORE INSERT ON `GRANT_DISBURSEMENT` FOR EACH ROW
BEGIN
    -- Declare a variable to hold the sum of disbursements
    DECLARE total_disbursements DECIMAL(10,2);

    -- Calculate the current sum of disbursements for the grant_award_id
    SELECT SUM(grant_disbursement_amount) INTO total_disbursements
    FROM GRANT_DISBURSEMENT
    WHERE grant_award_id = NEW.grant_award_id;

    -- If there are no disbursements yet, set the total to 0
    IF total_disbursements IS NULL THEN
        SET total_disbursements = 0;
    END IF;

    -- Check if the sum of existing and new disbursement exceeds fund_awarded
    IF total_disbursements + NEW.grant_disbursement_amount > (
        SELECT fund_awarded
        FROM GRANT_AWARD
        WHERE grant_award_id = NEW.grant_award_id
    ) THEN
        -- Throw an error
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The sum of GRANT_DISBURSEMENTS exceeds the fund_awarded for this GRANT_AWARD.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`GRANT_DISBURSEMENT_BEFORE_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`GRANT_DISBURSEMENT_BEFORE_UPDATE` BEFORE UPDATE ON `GRANT_DISBURSEMENT` FOR EACH ROW
BEGIN
    -- Declare a variable to hold the sum of disbursements
    DECLARE total_disbursements DECIMAL(10,2);

    -- Calculate the current sum of disbursements for the grant_award_id
    SELECT SUM(grant_disbursement_amount) INTO total_disbursements
    FROM GRANT_DISBURSEMENT
    WHERE grant_award_id = NEW.grant_award_id;

    -- If there are no disbursements yet, set the total to 0
    IF total_disbursements IS NULL THEN
        SET total_disbursements = 0;
    END IF;

    -- Check if the sum of existing and new disbursement exceeds fund_awarded
    IF total_disbursements + NEW.grant_disbursement_amount > (
        SELECT fund_awarded
        FROM GRANT_AWARD
        WHERE grant_award_id = NEW.grant_award_id
    ) THEN
        -- Throw an error
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The sum of GRANT_DISBURSEMENTS exceeds the fund_awarded for this GRANT_AWARD.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_BEFORE_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_BEFORE_INSERT` BEFORE INSERT ON `PROGRAM_DELIVERABLE` FOR EACH ROW
BEGIN
    IF CheckProgramDeliverableDueDate(NEW.contract_id, NEW.program_deliverable_due_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The program deliverable due date must be set within the active time range of its contract.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_AFTER_INSERT` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_AFTER_INSERT` AFTER INSERT ON `PROGRAM_DELIVERABLE` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = CONCAT('inserted new program deliverable ', NEW.program_deliverable_id);

	INSERT INTO PROGRAM_DELIVERABLE_CHANGE_HISTORY (program_deliverable_id, program_id, contract_id, change_timestamp, row_snapshot_serialized, changed_by, change_description)
	VALUES (
		NEW.program_deliverable_id,
		NEW.program_id,
		NEW.contract_id,
		NOW(),
		JSON_OBJECT(
			'program_deliverable_id', NEW.program_deliverable_id,
			'program_id', NEW.program_id,
			'contract_id', NEW.contract_id,
			'program_deliverable_type', NEW.program_deliverable_type,
			'program_deliverable_status', NEW.program_deliverable_status,
			'program_deliverable_due_date', NEW.program_deliverable_due_date,
			'program_deliverable_completion_date', NEW.program_deliverable_completion_date,
			'program_deliverable_description', NEW.program_deliverable_description
		), 
		USER(), -- This function returns the current MySQL user. Replace with your mechanism if different.
		change_desc
	);
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_BEFORE_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_BEFORE_UPDATE` BEFORE UPDATE ON `PROGRAM_DELIVERABLE` FOR EACH ROW
BEGIN
    IF CheckProgramDeliverableDueDate(NEW.contract_id, NEW.program_deliverable_due_date) = 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'The program deliverable due date must be set within the active time range of its contract.';
    END IF;
END$$


USE `grant-and-program-tracking`$$
DROP TRIGGER IF EXISTS `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_AFTER_UPDATE` $$
USE `grant-and-program-tracking`$$
CREATE DEFINER = CURRENT_USER TRIGGER `grant-and-program-tracking`.`PROGRAM_DELIVERABLE_AFTER_UPDATE` AFTER UPDATE ON `PROGRAM_DELIVERABLE` FOR EACH ROW
BEGIN
	DECLARE change_desc TEXT;
	SET change_desc = '';
    
	IF (NEW.program_deliverable_type != OLD.program_deliverable_type) THEN
		SET change_desc = CONCAT(change_desc, 'type changed from ', OLD.program_deliverable_type, ' to ', NEW.program_deliverable_type, '; ');
	END IF;
	IF (NEW.program_deliverable_status != OLD.program_deliverable_status) THEN
		SET change_desc = CONCAT(change_desc, 'status changed from ', OLD.program_deliverable_status, ' to ', NEW.program_deliverable_status, '; ');
	END IF;
	IF (NEW.program_deliverable_description != OLD.program_deliverable_description) THEN
		SET change_desc = CONCAT(change_desc, 'description changed from ', OLD.program_deliverable_description, ' to ', NEW.program_deliverable_description, '; ');
	END IF;
    IF (NEW.program_deliverable_due_date != OLD.program_deliverable_due_date) THEN
        SET change_desc = CONCAT(change_desc, 
                                 'due date changed from ', 
                                 DATE_FORMAT(OLD.program_deliverable_due_date, '%Y-%m-%d %H:%i:%s'), 
                                 ' to ', 
                                 DATE_FORMAT(NEW.program_deliverable_due_date, '%Y-%m-%d %H:%i:%s'), 
                                 '; ');
    END IF;
    IF (NEW.program_deliverable_completion_date != OLD.program_deliverable_completion_date) THEN
        SET change_desc = CONCAT(change_desc, 
                                 'completion date changed from ', 
                                 DATE_FORMAT(OLD.program_deliverable_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 ' to ', 
                                 DATE_FORMAT(NEW.program_deliverable_completion_date, '%Y-%m-%d %H:%i:%s'), 
                                 '; ');
    END IF;

	INSERT INTO PROGRAM_DELIVERABLE_CHANGE_HISTORY (program_deliverable_id, program_id, contract_id, change_timestamp, row_snapshot_serialized, changed_by, change_description)
	VALUES (
		NEW.program_deliverable_id,
		NEW.program_id,
		NEW.contract_id,
		NOW(),
		JSON_OBJECT(
			'program_deliverable_id', NEW.program_deliverable_id,
			'program_id', NEW.program_id,
			'contract_id', NEW.contract_id,
			'program_deliverable_type', NEW.program_deliverable_type,
			'program_deliverable_status', NEW.program_deliverable_status,
			'program_deliverable_due_date', NEW.program_deliverable_due_date,
			'program_deliverable_completion_date', NEW.program_deliverable_completion_date,
			'program_deliverable_description', NEW.program_deliverable_description
		), 
		USER(), -- This function returns the current MySQL user. Replace with your mechanism if different.
		change_desc
	);
END;$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`FUNDING_ORGANIZATION`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (1, 'California Wellness Foundation', 'CCGI: California');
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (2, 'Defend the Vote', NULL);
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (3, 'Goldman Fund', NULL);
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (4, 'William Talbott Hillman Foundation', NULL);
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (5, 'Fulk Family Foundation', NULL);
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (6, 'Abell Foundation ', NULL);
INSERT INTO `grant-and-program-tracking`.`FUNDING_ORGANIZATION` (`funding_organization_id`, `funding_organization_name`, `funding_organization_description`) VALUES (7, 'Morris and Gwendolyn Cafritz Foundation', NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`GRANT_OPPORTUNITY`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (1, 'California Crime Guns', '2020-10-14 00:00:00', 'funding for a 3 year program', 350000, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (2, 'Lobbying Collective (c4)', '2023-12-21 00:00:00', NULL, 100000, 2);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (3, 'Government Transparency', '2024-02-18 00:00:00', NULL, 75000, 3);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (4, 'CCGI Mid Atlantic', '2024-04-25 00:00:00', NULL, 100000, 4);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (5, 'EFF / ERPO Campaign Illinois', '2024-05-23 00:00:00', NULL, 500000, 5);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (6, 'California Crime Guns', '2023-10-14 00:00:00', 'funding for a 3 year program', 350000, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (7, 'CCGI Baltimore ', '2023-11-05 00:00:00', NULL, 100000, 6);
INSERT INTO `grant-and-program-tracking`.`GRANT_OPPORTUNITY` (`grant_opportunity_id`, `grant_opportunity_name`, `grant_opportunity_submission_deadline`, `grant_opportunity_description`, `grant_opportunity_fund_amount`, `funding_organization_id`) VALUES (8, 'DC Volunteer Lawyers Project', '2023-04-01 00:00:00', NULL, 30000, 7);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`GRANT_APPLICATION`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (1, 1, 350000, 'awarded', '2020-10-10 00:00:00', '2020-10-11 00:00:00');
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (2, 2, 90000, 'awarded', '2023-12-17 00:00:00', '2023-12-17 00:00:00');
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (3, 3, 75000, 'todo', '2024-02-16 00:00:00', NULL);
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (4, 5, 500000, 'todo', '2024-05-20 00:00:00', NULL);
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (6, 6, 350000, 'awarded', '2023-10-10 00:00:00', '2023-10-11 00:00:00');
INSERT INTO `grant-and-program-tracking`.`GRANT_APPLICATION` (`grant_application_id`, `grant_opportunity_id`, `app_fund_requested`, `app_status`, `app_planned_submission_date`, `app_actual_submission_date`) VALUES (7, 7, 100000, 'submitted', '2023-11-01 00:00:00', '2023-11-01 00:00:00');

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`GRANT_AWARD`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 1, 350000, '2020-11-03 00:00:00', 1, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (2, 1, 350000, '2023-11-03 00:00:00', 6, 6);
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 2, 90000, '2023-12-29 00:00:00', 2, 2);
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (4, 3, 25000, '2023-09-02 00:00:00', NULL, NULL);
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (5, 4, 32000, '2023-09-24 00:00:00', NULL, NULL);
INSERT INTO `grant-and-program-tracking`.`GRANT_AWARD` (`grant_award_id`, `funding_organization_id`, `fund_awarded`, `award_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (6, 5, 700000, '2023-10-24 00:00:00', NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`PROGRAM`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`PROGRAM` (`program_id`, `program_name`, `program_description`, `program_status`) VALUES (1, 'California Crime Guns Program', NULL, 'active');
INSERT INTO `grant-and-program-tracking`.`PROGRAM` (`program_id`, `program_name`, `program_description`, `program_status`) VALUES (2, 'End Family Fire', NULL, 'active');
INSERT INTO `grant-and-program-tracking`.`PROGRAM` (`program_id`, `program_name`, `program_description`, `program_status`) VALUES (3, 'Chicago Crime Guns', NULL, 'active');

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`APPLICATION_DELIVERABLE`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id`, `app_deliverable_description`, `app_deliverable_status`, `app_deliverable_planned_completion_date`, `app_deliverable_actual_completion_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 'budget', 'todo', '2020-10-12 00:00:00', '2020-10-06 00:00:00', 1, 1);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id`, `app_deliverable_description`, `app_deliverable_status`, `app_deliverable_planned_completion_date`, `app_deliverable_actual_completion_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (2, 'schedule', 'todo', '2020-10-12 00:00:00', '2020-10-06 00:00:00', 1, 1);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id`, `app_deliverable_description`, `app_deliverable_status`, `app_deliverable_planned_completion_date`, `app_deliverable_actual_completion_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 'budget', 'todo', '2024-01-10 00:00:00', NULL, 3, 3);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id`, `app_deliverable_description`, `app_deliverable_status`, `app_deliverable_planned_completion_date`, `app_deliverable_actual_completion_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (4, 'budget', 'todo', '2023-10-02 00:00:00', '2023-10-06 00:00:00', 6, 6);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_DELIVERABLE` (`app_deliverable_id`, `app_deliverable_description`, `app_deliverable_status`, `app_deliverable_planned_completion_date`, `app_deliverable_actual_completion_date`, `grant_application_id`, `grant_opportunity_id`) VALUES (5, 'schedule', 'todo', '2023-10-02 00:00:00', '2023-10-06 00:00:00', 6, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`PROGRAM_EXPENDITURE`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (11, 100000, 'annual program expense', '2021-01-07 00:00:00', 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (12, 100000, 'annual program expense', '2022-01-07 00:00:00', 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (13, 100000, 'annual program expense', '2023-01-07 00:00:00', 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (21, 15000, 'quarterly program expense', '2023-01-01 00:00:00', 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (22, 15000, 'quarterly program expense', '2023-04-01 00:00:00', 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (23, 15000, 'quarterly program expense', '2023-07-01 00:00:00', 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (24, 15000, 'quarterly program expense', '2023-10-01 00:00:00', 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_EXPENDITURE` (`program_expenditure_id`, `program_expenditure_amount`, `program_expenditure_description`, `program_expenditure_date`, `program_id`) VALUES (31, 37000, 'one-time expense', '2023-05-01 00:00:00', 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`STAKEHOLDER`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`STAKEHOLDER` (`stakeholder_id`, `stateholder_name`, `stakeholder_role`) VALUES (1, 'Meera M', 'coordinator');
INSERT INTO `grant-and-program-tracking`.`STAKEHOLDER` (`stakeholder_id`, `stateholder_name`, `stakeholder_role`) VALUES (2, 'James B', 'internal rep');
INSERT INTO `grant-and-program-tracking`.`STAKEHOLDER` (`stakeholder_id`, `stateholder_name`, `stakeholder_role`) VALUES (3, 'Liz D', 'approver');
INSERT INTO `grant-and-program-tracking`.`STAKEHOLDER` (`stakeholder_id`, `stateholder_name`, `stakeholder_role`) VALUES (4, 'Krystal C', 'approver');

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 1, 1);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 2, 2);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 3, 3);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 4, 5);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (2, 1, 1);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 1, 1);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 2, 2);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (4, 2, 2);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 3, 3);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 4, 5);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (1, 6, 6);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (2, 6, 6);
INSERT INTO `grant-and-program-tracking`.`APPLICATION_STAKEHOLDER` (`stakeholder_id`, `grant_application_id`, `grant_opportunity_id`) VALUES (3, 6, 6);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`GRANT_DISBURSEMENT`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (1, '2021-01-01 00:00:00', 116666.66, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (2, '2022-01-01 00:00:00', 116666.66, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (3, '2023-01-01 00:00:00', 116666.66, 1);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (4, '2024-01-01 00:00:00', 116666.66, 2);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (5, '2025-01-01 00:00:00', 116666.66, 2);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (6, '2026-01-01 00:00:00', 116666.66, 2);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (7, '2023-02-01 00:00:00', 45000, 3);
INSERT INTO `grant-and-program-tracking`.`GRANT_DISBURSEMENT` (`grant_disbursement_id`, `grant_disbursement_date`, `grant_disbursement_amount`, `grant_award_id`) VALUES (8, '2024-04-01 00:00:00', 45000, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`CONTRACT`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`CONTRACT` (`contract_id`, `start_date`, `end_date`, `grant_award_id`) VALUES (1, '2021-01-01 00:00:00', '2024-01-01 00:00:00', 1);
INSERT INTO `grant-and-program-tracking`.`CONTRACT` (`contract_id`, `start_date`, `end_date`, `grant_award_id`) VALUES (2, '2024-01-01 00:00:00', '2027-01-01 00:00:00', 2);
INSERT INTO `grant-and-program-tracking`.`CONTRACT` (`contract_id`, `start_date`, `end_date`, `grant_award_id`) VALUES (3, NULL, NULL, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `grant-and-program-tracking`.`PROGRAM_DELIVERABLE`
-- -----------------------------------------------------
START TRANSACTION;
USE `grant-and-program-tracking`;
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (1, 'expense report', 'todo', '2022-01-01 00:00:00', NULL, NULL, 1, 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (2, 'expense report', 'todo', '2023-01-01 00:00:00', NULL, NULL, 1, 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (3, 'expense report', 'todo', '2024-01-01 00:00:00', NULL, NULL, 1, 1);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (4, 'expense report', 'todo', '2025-01-01 00:00:00', NULL, NULL, 1, 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (5, 'expense report', 'todo', '2026-01-01 00:00:00', NULL, NULL, 1, 2);
INSERT INTO `grant-and-program-tracking`.`PROGRAM_DELIVERABLE` (`program_deliverable_id`, `program_deliverable_type`, `program_deliverable_status`, `program_deliverable_due_date`, `program_deliverable_description`, `program_deliverable_completion_date`, `program_id`, `contract_id`) VALUES (6, 'expense report', 'todo', '2027-01-01 00:00:00', NULL, NULL, 1, 2);

COMMIT;


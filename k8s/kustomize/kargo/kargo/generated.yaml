---
# Source: kargo/crds/kargo.akuity.io_freights.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: freights.kargo.akuity.io
spec:
  group: kargo.akuity.io
  names:
    kind: Freight
    listKind: FreightList
    plural: freights
    singular: freight
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .metadata.labels.kargo\.akuity\.io/alias
      name: Alias
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Freight represents a collection of versioned artifacts.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          charts:
            description: Charts describes specific versions of specific Helm charts.
            items:
              description: Chart describes a specific version of a Helm chart.
              properties:
                name:
                  description: Name specifies the name of the chart.
                  type: string
                registryURL:
                  description: RepoURL specifies the remote registry in which this
                    chart is located.
                  type: string
                version:
                  description: Version specifies a particular version of the chart.
                  type: string
              type: object
            type: array
          commits:
            description: Commits describes specific Git repository commits.
            items:
              description: GitCommit describes a specific commit from a specific Git
                repository.
              properties:
                author:
                  description: Author is the git commit author
                  type: string
                branch:
                  description: Branch denotes the branch of the repository where this
                    commit was found.
                  type: string
                healthCheckCommit:
                  description: HealthCheckCommit is the ID of a specific commit. When
                    specified, assessments of Stage health will used this value (instead
                    of ID) when determining if applicable sources of Argo CD Application
                    resources associated with the Stage are or are not synced to this
                    commit. Note that there are cases (as in that of Kargo Render
                    being utilized as a promotion mechanism) wherein the value of
                    this field may differ from the commit ID found in the ID field.
                  type: string
                id:
                  description: ID is the ID of a specific commit in the Git repository
                    specified by RepoURL.
                  type: string
                message:
                  description: Message is the git commit message
                  type: string
                repoURL:
                  description: RepoURL is the URL of a Git repository.
                  type: string
              type: object
            type: array
          id:
            description: ID is a system-assigned value that is derived deterministically
              from the contents of the Freight. i.e. Two pieces of Freight can be
              compared for equality by comparing their IDs.
            type: string
          images:
            description: Images describes specific versions of specific container
              images.
            items:
              description: Image describes a specific version of a container image.
              properties:
                digest:
                  description: Digest identifies a specific version of the image in
                    the repository specified by RepoURL. This is a more precise identifier
                    than Tag.
                  type: string
                gitRepoURL:
                  description: GitRepoURL specifies the URL of a Git repository that
                    contains the source code for the image repository referenced by
                    the RepoURL field if Kargo was able to infer it.
                  type: string
                repoURL:
                  description: RepoURL describes the repository in which the image
                    can be found.
                  type: string
                tag:
                  description: Tag identifies a specific version of the image in the
                    repository specified by RepoURL.
                  type: string
              type: object
            type: array
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          status:
            description: Status describes the current status of this Freight.
            properties:
              approvedFor:
                additionalProperties:
                  description: ApprovedStage describes a Stage for which Freight has
                    been (manually) approved.
                  type: object
                description: ApprovedFor describes the Stages for which this Freight
                  has been approved preemptively/manually by a user. This is useful
                  for hotfixes, where one might wish to promote a piece of Freight
                  to a given Stage without transiting the entire pipeline.
                type: object
              verifiedIn:
                additionalProperties:
                  description: VerifiedStage describes a Stage in which Freight has
                    been verified.
                  type: object
                description: VerifiedIn describes the Stages in which this Freight
                  has been verified through promotion and subsequent health checks.
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: kargo/crds/kargo.akuity.io_promotionpolicies.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: promotionpolicies.kargo.akuity.io
spec:
  group: kargo.akuity.io
  names:
    kind: PromotionPolicy
    listKind: PromotionPolicyList
    plural: promotionpolicies
    shortNames:
    - promopolicy
    - promopolicies
    singular: promotionpolicy
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: PromotionPolicy specifies whether a given Stage is eligible for
          auto-promotion to newly discovered Freight.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          enableAutoPromotion:
            description: 'EnableAutoPromotion indicates whether new Freight can automatically
              be promoted into the Stage referenced by the Stage field. Note: There
              are other conditions also required for an auto-promotion to occur. Specifically,
              there must be a single source of new Freight, so regardless of the value
              of this field, an auto-promotion could never occur for a Stage subscribed
              to MULTIPLE upstream Stages. This field defaults to false, but is commonly
              set to true for Stages that subscribe to repositories instead of other,
              upstream Stages. This allows users to define Stages that are automatically
              updated as soon as new materials are detected.'
            type: boolean
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          stage:
            description: Stage references a Stage in the same project as this PromotionPolicy
              to which this PromotionPolicy applies.
            minLength: 1
            pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
            type: string
        required:
        - stage
        type: object
    served: true
    storage: true

---
# Source: kargo/crds/kargo.akuity.io_promotions.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: promotions.kargo.akuity.io
spec:
  group: kargo.akuity.io
  names:
    kind: Promotion
    listKind: PromotionList
    plural: promotions
    shortNames:
    - promo
    - promos
    singular: promotion
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .spec.stage
      name: Stage
      type: string
    - jsonPath: .spec.freight
      name: Freight
      type: string
    - jsonPath: .status.phase
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Promotion represents a request to transition a particular Stage
          into a particular Freight.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec describes the desired transition of a specific Stage
              into a specific Freight.
            properties:
              freight:
                description: Freight specifies the piece of Freight to be promoted
                  into the Stage referenced by the Stage field.
                minLength: 1
                type: string
              stage:
                description: Stage specifies the name of the Stage to which this Promotion
                  applies. The Stage referenced by this field MUST be in the same
                  namespace as the Promotion.
                minLength: 1
                pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                type: string
            required:
            - freight
            - stage
            type: object
          status:
            description: Status describes the current state of the transition represented
              by this Promotion.
            properties:
              message:
                description: Message is a display message about the promotion, including
                  any errors preventing the Promotion controller from executing this
                  Promotion. i.e. If the Phase field has a value of Failed, this field
                  can be expected to explain why.
                type: string
              metadata:
                additionalProperties:
                  type: string
                description: Metadata holds arbitrary metadata set by promotion mechanisms
                  (e.g. for display purposes, or internal bookkeeping)
                type: object
              phase:
                description: Phase describes where the Promotion currently is in its
                  lifecycle.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: kargo/crds/kargo.akuity.io_stages.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: stages.kargo.akuity.io
spec:
  group: kargo.akuity.io
  names:
    kind: Stage
    listKind: StageList
    plural: stages
    singular: stage
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.currentFreight.id
      name: Current Freight
      type: string
    - jsonPath: .status.health.status
      name: Health
      type: string
    - jsonPath: .status.phase
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Stage is the Kargo API's main type.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec describes sources of Freight used by the Stage and how
              to incorporate Freight into the Stage.
            properties:
              promotionMechanisms:
                description: PromotionMechanisms describes how to incorporate Freight
                  into the Stage. This is an optional field as it is sometimes useful
                  to aggregates available Freight from multiple upstream Stages without
                  performing any actions. The utility of this is to allow multiple
                  downstream Stages to subscribe to a single upstream Stage where
                  they may otherwise have subscribed to multiple upstream Stages.
                properties:
                  argoCDAppUpdates:
                    description: ArgoCDAppUpdates describes updates that should be
                      applied to Argo CD Application resources to incorporate Freight
                      into the Stage. This field is optional, as such actions are
                      not required in all cases. Note that all updates specified by
                      the GitRepoUpdates field, if any, are applied BEFORE these.
                    items:
                      description: ArgoCDAppUpdate describes updates that should be
                        applied to an Argo CD Application resources to incorporate
                        Freight into a Stage.
                      properties:
                        appName:
                          description: AppName specifies the name of an Argo CD Application
                            resource to be updated.
                          minLength: 1
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                        appNamespace:
                          description: AppNamespace specifies the namespace of an
                            Argo CD Application resource to be updated. If left unspecified,
                            the namespace of this Application resource will use the
                            value of ARGOCD_NAMESPACE or "argocd"
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                        sourceUpdates:
                          description: SourceUpdates describes updates to be applied
                            to various sources of the specified Argo CD Application
                            resource.
                          items:
                            description: ArgoCDSourceUpdate describes updates that
                              should be applied to one of an Argo CD Application resource's
                              sources.
                            properties:
                              chart:
                                description: Chart specifies a chart within a Helm
                                  chart registry if RepoURL points to a Helm chart
                                  registry. Application sources that point directly
                                  at a chart do so through a combination of their
                                  own RepoURL (registry) and Chart fields, so BOTH
                                  of those are used as criteria in selecting an Application
                                  source to update. This field MUST always be used
                                  when RepoURL points at a Helm chart registry. This
                                  field MUST never be used when RepoURL points at
                                  a Git repository.
                                type: string
                              helm:
                                description: Helm describes updates to the source's
                                  Helm-specific attributes.
                                properties:
                                  images:
                                    description: Images describes how specific image
                                      versions can be incorporated into an Argo CD
                                      Application's Helm parameters.
                                    items:
                                      description: ArgoCDHelmImageUpdate describes
                                        how a specific image version can be incorporated
                                        into an Argo CD Application's Helm parameters.
                                      properties:
                                        image:
                                          description: Image specifies a container
                                            image (without tag). This is a required
                                            field.
                                          minLength: 1
                                          type: string
                                        key:
                                          description: Key specifies a key within
                                            an Argo CD Application's Helm parameters
                                            that is to be updated. This is a required
                                            field.
                                          minLength: 1
                                          type: string
                                        value:
                                          description: "Value specifies the new value
                                            for the specified key in the Argo CD Application's
                                            Helm parameters. Valid values are: \n
                                            - ImageAndTag: Replaces the value of the
                                            specified key with <image name>:<tag>
                                            - Tag: Replaces the value of the specified
                                            key with just the new tag - ImageAndDigest:
                                            Replaces the value of the specified key
                                            with <image name>@<digest> - Digest: Replaces
                                            the value of the specified key with just
                                            the new digest. \n This is a required
                                            field."
                                          enum:
                                          - ImageAndTag
                                          - Tag
                                          - ImageAndDigest
                                          - Digest
                                          type: string
                                      required:
                                      - image
                                      - key
                                      - value
                                      type: object
                                    minItems: 1
                                    type: array
                                required:
                                - images
                                type: object
                              kustomize:
                                description: Kustomize describes updates to the source's
                                  Kustomize-specific attributes.
                                properties:
                                  images:
                                    description: Images describes how specific image
                                      versions can be incorporated into an Argo CD
                                      Application's Kustomize parameters.
                                    items:
                                      description: ArgoCDKustomizeImageUpdate describes
                                        how a specific image version can be incorporated
                                        into an Argo CD Application's Kustomize parameters.
                                      properties:
                                        image:
                                          description: Image specifies a container
                                            image (without tag). This is a required
                                            field.
                                          minLength: 1
                                          type: string
                                        useDigest:
                                          description: UseDigest specifies whether
                                            the image's digest should be used instead
                                            of its tag.
                                          type: boolean
                                      required:
                                      - image
                                      type: object
                                    minItems: 1
                                    type: array
                                required:
                                - images
                                type: object
                              repoURL:
                                description: 'RepoURL identifies which of the Argo
                                  CD Application''s sources this update is intended
                                  for. Note: As of Argo CD 2.6, Application''s can
                                  use multiple sources.'
                                minLength: 1
                                type: string
                              updateTargetRevision:
                                description: UpdateTargetRevision is a bool indicating
                                  whether the source should be updated such that its
                                  TargetRevision field points at the most recently
                                  git commit (if RepoURL references a git repository)
                                  or chart version (if RepoURL references a chart
                                  repository).
                                type: boolean
                            required:
                            - repoURL
                            type: object
                          type: array
                      required:
                      - appName
                      type: object
                    type: array
                  gitRepoUpdates:
                    description: GitRepoUpdates describes updates that should be applied
                      to Git repositories to incorporate Freight into the Stage. This
                      field is optional, as such actions are not required in all cases.
                    items:
                      description: GitRepoUpdate describes updates that should be
                        applied to a Git repository (using various configuration management
                        tools) to incorporate Freight into a Stage.
                      properties:
                        helm:
                          description: Helm describes how to use Helm to incorporate
                            Freight into the Stage. This is mutually exclusive with
                            the Render and Kustomize fields.
                          properties:
                            charts:
                              description: Charts describes how specific chart versions
                                can be incorporated into an umbrella chart.
                              items:
                                description: HelmChartDependencyUpdate describes how
                                  a specific Helm chart that is used as a subchart
                                  of an umbrella chart can be updated.
                                properties:
                                  chartPath:
                                    description: ChartPath is the path to an umbrella
                                      chart.
                                    minLength: 1
                                    pattern: ^[\w-\.]+(/[\w-\.]+)*$
                                    type: string
                                  name:
                                    description: Name along with RegistryURL identify
                                      a subchart of the umbrella chart at ChartPath
                                      whose version should be updated.
                                    minLength: 1
                                    type: string
                                  registryURL:
                                    description: RegistryURL along with Name identify
                                      a subchart of the umbrella chart at ChartPath
                                      whose version should be updated.
                                    minLength: 1
                                    pattern: ^(((https?)|(oci))://)([\w\d\.\-]+)(:[\d]+)?(/.*)*$
                                    type: string
                                required:
                                - chartPath
                                - name
                                - registryURL
                                type: object
                              type: array
                            images:
                              description: Images describes how specific image versions
                                can be incorporated into Helm values files.
                              items:
                                description: HelmImageUpdate describes how a specific
                                  image version can be incorporated into a specific
                                  Helm values file.
                                properties:
                                  image:
                                    description: Image specifies a container image
                                      (without tag). This is a required field.
                                    minLength: 1
                                    pattern: ^(\w+([\.-]\w+)*(:[\d]+)?/)?(\w+([\.-]\w+)*)(/\w+([\.-]\w+)*)*$
                                    type: string
                                  key:
                                    description: Key specifies a key within the Helm
                                      values file that is to be updated. This is a
                                      required field.
                                    minLength: 1
                                    type: string
                                  value:
                                    description: "Value specifies the new value for
                                      the specified key in the specified Helm values
                                      file. Valid values are: \n - ImageAndTag: Replaces
                                      the value of the specified key with <image name>:<tag>
                                      - Tag: Replaces the value of the specified key
                                      with just the new tag - ImageAndDigest: Replaces
                                      the value of the specified key with <image name>@<digest>
                                      - Digest: Replaces the value of the specified
                                      key with just the new digest. \n This is a required
                                      field."
                                    enum:
                                    - ImageAndTag
                                    - Tag
                                    - ImageAndDigest
                                    - Digest
                                    type: string
                                  valuesFilePath:
                                    description: ValuesFilePath specifies a path to
                                      the Helm values file that is to be updated.
                                      This is a required field.
                                    minLength: 1
                                    pattern: ^[\w-\.]+(/[\w-\.]+)*$
                                    type: string
                                required:
                                - image
                                - key
                                - value
                                - valuesFilePath
                                type: object
                              type: array
                          type: object
                        kustomize:
                          description: Kustomize describes how to use Kustomize to
                            incorporate Freight into the Stage. This is mutually exclusive
                            with the Render and Helm fields.
                          properties:
                            images:
                              description: Images describes images for which `kustomize
                                edit set image` should be executed and the paths in
                                which those commands should be executed.
                              items:
                                description: KustomizeImageUpdate describes how to
                                  run `kustomize edit set image` for a given image.
                                properties:
                                  image:
                                    description: Image specifies a container image
                                      (without tag). This is a required field.
                                    minLength: 1
                                    type: string
                                  path:
                                    description: Path specifies a path in which the
                                      `kustomize edit set image` command should be
                                      executed. This is a required field.
                                    minLength: 1
                                    pattern: ^[\w-\.]+(/[\w-\.]+)*$
                                    type: string
                                  useDigest:
                                    description: UseDigest specifies whether the image's
                                      digest should be used instead of its tag.
                                    type: boolean
                                required:
                                - image
                                - path
                                type: object
                              minItems: 1
                              type: array
                          required:
                          - images
                          type: object
                        pullRequest:
                          description: PullRequest will generate a pull request instead
                            of making the commit directly
                          properties:
                            github:
                              description: GitHub indicates git provider is GitHub
                              type: object
                          type: object
                        readBranch:
                          description: ReadBranch specifies a particular branch of
                            the repository from which to locate contents that will
                            be written to the branch specified by the WriteBranch
                            field. This field is optional. When not specified, the
                            ReadBranch is implicitly the repository's default branch
                            AND in cases where a Freight includes a GitCommit, that
                            commit's ID will supersede the value of this field. Therefore,
                            in practice, this field is only used to clarify what branch
                            of a repository can be treated as a source of manifests
                            or other configuration when a Stage has no subscription
                            to that repository.
                          pattern: ^(\w+([-/]\w+)*)?$
                          type: string
                        render:
                          description: Render describes how to use Kargo Render to
                            incorporate Freight into the Stage. This is mutually exclusive
                            with the Kustomize and Helm fields.
                          properties:
                            images:
                              description: Images describes how images can be incorporated
                                into a Stage using Kargo Render. If this field is
                                omitted, all images in the Freight being promoted
                                will be passed to Kargo Render in the form <image
                                name>:<tag>. (e.g. Will not use digests by default.)
                              items:
                                description: KargoRenderImageUpdate describes how
                                  an image can be incorporated into a Stage using
                                  Kargo Render.
                                properties:
                                  image:
                                    description: Image specifies a container image
                                      (without tag). This is a required field.
                                    minLength: 1
                                    type: string
                                  useDigest:
                                    description: UseDigest specifies whether the image's
                                      digest should be used instead of its tag.
                                    type: boolean
                                required:
                                - image
                                type: object
                              type: array
                          type: object
                        repoURL:
                          description: RepoURL is the URL of the repository to update.
                            This is a required field.
                          minLength: 1
                          pattern: ^https://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$
                          type: string
                        writeBranch:
                          description: WriteBranch specifies the particular branch
                            of the repository to be updated. This is a required field.
                          minLength: 1
                          pattern: ^\w+([-/]\w+)*$
                          type: string
                      required:
                      - repoURL
                      - writeBranch
                      type: object
                    type: array
                type: object
              subscriptions:
                description: Subscriptions describes the Stage's sources of Freight.
                  This is a required field.
                properties:
                  upstreamStages:
                    description: UpstreamStages identifies other Stages as potential
                      sources of Freight for this Stage. This field is mutually exclusive
                      with the Repos field.
                    items:
                      description: StageSubscription defines a subscription to Freight
                        from another Stage.
                      properties:
                        name:
                          description: Name specifies the name of a Stage.
                          minLength: 1
                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  warehouse:
                    description: Warehouse is a subscription to a Warehouse. This
                      field is mutually exclusive with the UpstreamStages field.
                    type: string
                type: object
              verification:
                description: Verification describes how to verify a Stage's current
                  Freight is fit for promotion downstream.
                properties:
                  analysisRunMetadata:
                    description: AnalysisRunMetadata is contains optional metadata
                      that should be applied to all AnalysisRuns.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Additional annotations to apply to an AnalysisRun.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Additional labels to apply to an AnalysisRun.
                        type: object
                    type: object
                  analysisTemplates:
                    description: AnalysisTemplates is a list of AnalysisTemplates
                      from which AnalysisRuns should be created to verify a Stage's
                      current Freight is fit to be promoted downstream.
                    items:
                      description: AnalysisTemplateReference is a reference to an
                        AnalysisTemplate.
                      properties:
                        name:
                          description: Name is the name of the AnalysisTemplate in
                            the same project/namespace as the Stage.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                  args:
                    description: Args lists arguments that should be added to all
                      AnalysisRuns.
                    items:
                      description: AnalysisRunArgument represents an argument to be
                        added to an AnalysisRun.
                      properties:
                        name:
                          description: Name is the name of the argument.
                          type: string
                        value:
                          description: Value is the value of the argument.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                type: object
            required:
            - subscriptions
            type: object
          status:
            description: Status describes the Stage's current and recent Freight,
              health, and more.
            properties:
              currentFreight:
                description: CurrentFreight is a simplified representation of the
                  Stage's current Freight describing what is currently deployed to
                  the Stage.
                properties:
                  charts:
                    description: Charts describes specific versions of specific Helm
                      charts.
                    items:
                      description: Chart describes a specific version of a Helm chart.
                      properties:
                        name:
                          description: Name specifies the name of the chart.
                          type: string
                        registryURL:
                          description: RepoURL specifies the remote registry in which
                            this chart is located.
                          type: string
                        version:
                          description: Version specifies a particular version of the
                            chart.
                          type: string
                      type: object
                    type: array
                  commits:
                    description: Commits describes specific Git repository commits.
                    items:
                      description: GitCommit describes a specific commit from a specific
                        Git repository.
                      properties:
                        author:
                          description: Author is the git commit author
                          type: string
                        branch:
                          description: Branch denotes the branch of the repository
                            where this commit was found.
                          type: string
                        healthCheckCommit:
                          description: HealthCheckCommit is the ID of a specific commit.
                            When specified, assessments of Stage health will used
                            this value (instead of ID) when determining if applicable
                            sources of Argo CD Application resources associated with
                            the Stage are or are not synced to this commit. Note that
                            there are cases (as in that of Kargo Render being utilized
                            as a promotion mechanism) wherein the value of this field
                            may differ from the commit ID found in the ID field.
                          type: string
                        id:
                          description: ID is the ID of a specific commit in the Git
                            repository specified by RepoURL.
                          type: string
                        message:
                          description: Message is the git commit message
                          type: string
                        repoURL:
                          description: RepoURL is the URL of a Git repository.
                          type: string
                      type: object
                    type: array
                  id:
                    description: ID is system-assigned value that is derived deterministically
                      from the contents of the Freight. i.e. Two pieces of Freight
                      can be compared for equality by comparing their IDs.
                    type: string
                  images:
                    description: Images describes specific versions of specific container
                      images.
                    items:
                      description: Image describes a specific version of a container
                        image.
                      properties:
                        digest:
                          description: Digest identifies a specific version of the
                            image in the repository specified by RepoURL. This is
                            a more precise identifier than Tag.
                          type: string
                        gitRepoURL:
                          description: GitRepoURL specifies the URL of a Git repository
                            that contains the source code for the image repository
                            referenced by the RepoURL field if Kargo was able to infer
                            it.
                          type: string
                        repoURL:
                          description: RepoURL describes the repository in which the
                            image can be found.
                          type: string
                        tag:
                          description: Tag identifies a specific version of the image
                            in the repository specified by RepoURL.
                          type: string
                      type: object
                    type: array
                  verificationResult:
                    description: VerificationInfo is information about any verification
                      process that was associated with this Freight for this Stage.
                    properties:
                      analysisRun:
                        description: AnalysisRunReference is a reference to an AnalysisRun.
                        properties:
                          name:
                            description: Name is the name of the AnalysisRun.
                            type: string
                          namespace:
                            description: Namespace is the namespace of the AnalysisRun.
                            type: string
                          phase:
                            description: Phase is the last observed phase of the AnalysisRun
                              referenced by Name.
                            type: string
                        required:
                        - name
                        - namespace
                        - phase
                        type: object
                    required:
                    - analysisRun
                    type: object
                type: object
              currentPromotion:
                description: CurrentPromotion is a reference to the currently Running
                  promotion.
                properties:
                  freight:
                    description: Freight is the freight being promoted
                    properties:
                      charts:
                        description: Charts describes specific versions of specific
                          Helm charts.
                        items:
                          description: Chart describes a specific version of a Helm
                            chart.
                          properties:
                            name:
                              description: Name specifies the name of the chart.
                              type: string
                            registryURL:
                              description: RepoURL specifies the remote registry in
                                which this chart is located.
                              type: string
                            version:
                              description: Version specifies a particular version
                                of the chart.
                              type: string
                          type: object
                        type: array
                      commits:
                        description: Commits describes specific Git repository commits.
                        items:
                          description: GitCommit describes a specific commit from
                            a specific Git repository.
                          properties:
                            author:
                              description: Author is the git commit author
                              type: string
                            branch:
                              description: Branch denotes the branch of the repository
                                where this commit was found.
                              type: string
                            healthCheckCommit:
                              description: HealthCheckCommit is the ID of a specific
                                commit. When specified, assessments of Stage health
                                will used this value (instead of ID) when determining
                                if applicable sources of Argo CD Application resources
                                associated with the Stage are or are not synced to
                                this commit. Note that there are cases (as in that
                                of Kargo Render being utilized as a promotion mechanism)
                                wherein the value of this field may differ from the
                                commit ID found in the ID field.
                              type: string
                            id:
                              description: ID is the ID of a specific commit in the
                                Git repository specified by RepoURL.
                              type: string
                            message:
                              description: Message is the git commit message
                              type: string
                            repoURL:
                              description: RepoURL is the URL of a Git repository.
                              type: string
                          type: object
                        type: array
                      id:
                        description: ID is system-assigned value that is derived deterministically
                          from the contents of the Freight. i.e. Two pieces of Freight
                          can be compared for equality by comparing their IDs.
                        type: string
                      images:
                        description: Images describes specific versions of specific
                          container images.
                        items:
                          description: Image describes a specific version of a container
                            image.
                          properties:
                            digest:
                              description: Digest identifies a specific version of
                                the image in the repository specified by RepoURL.
                                This is a more precise identifier than Tag.
                              type: string
                            gitRepoURL:
                              description: GitRepoURL specifies the URL of a Git repository
                                that contains the source code for the image repository
                                referenced by the RepoURL field if Kargo was able
                                to infer it.
                              type: string
                            repoURL:
                              description: RepoURL describes the repository in which
                                the image can be found.
                              type: string
                            tag:
                              description: Tag identifies a specific version of the
                                image in the repository specified by RepoURL.
                              type: string
                          type: object
                        type: array
                      verificationResult:
                        description: VerificationInfo is information about any verification
                          process that was associated with this Freight for this Stage.
                        properties:
                          analysisRun:
                            description: AnalysisRunReference is a reference to an
                              AnalysisRun.
                            properties:
                              name:
                                description: Name is the name of the AnalysisRun.
                                type: string
                              namespace:
                                description: Namespace is the namespace of the AnalysisRun.
                                type: string
                              phase:
                                description: Phase is the last observed phase of the
                                  AnalysisRun referenced by Name.
                                type: string
                            required:
                            - name
                            - namespace
                            - phase
                            type: object
                        required:
                        - analysisRun
                        type: object
                    type: object
                  name:
                    description: Name is the name of the Promotion
                    type: string
                required:
                - freight
                - name
                type: object
              error:
                description: Error describes any errors that are preventing the Stage
                  controller from assessing Stage health or from finding new Freight.
                type: string
              health:
                description: Health is the Stage's last observed health.
                properties:
                  argoCDApps:
                    description: ArgoCDApps describes the current state of any related
                      ArgoCD Applications.
                    items:
                      description: ArgoCDAppStatus describes the current state of
                        a single ArgoCD Application.
                      properties:
                        healthStatus:
                          description: HealthStatus is the health of the ArgoCD Application.
                          properties:
                            message:
                              type: string
                            status:
                              type: string
                          required:
                          - status
                          type: object
                        name:
                          description: Name is the name of the ArgoCD Application.
                          type: string
                        namespace:
                          description: Namespace is the namespace of the ArgoCD Application.
                          type: string
                        syncStatus:
                          description: SyncStatus is the sync status of the ArgoCD
                            Application.
                          properties:
                            revision:
                              type: string
                            revisions:
                              items:
                                type: string
                              type: array
                            status:
                              type: string
                          required:
                          - status
                          type: object
                      required:
                      - name
                      - namespace
                      type: object
                    type: array
                  issues:
                    description: Issues clarifies why a Stage in any state other than
                      Healthy is in that state. This field will always be the empty
                      when a Stage is Healthy.
                    items:
                      type: string
                    type: array
                  status:
                    description: Status describes the health of the Stage.
                    type: string
                type: object
              history:
                description: History is a stack of recent Freight. By default, the
                  last ten Freight are stored.
                items:
                  description: SimpleFreight is a simplified representation of a piece
                    of Freight -- not a root resource type.
                  properties:
                    charts:
                      description: Charts describes specific versions of specific
                        Helm charts.
                      items:
                        description: Chart describes a specific version of a Helm
                          chart.
                        properties:
                          name:
                            description: Name specifies the name of the chart.
                            type: string
                          registryURL:
                            description: RepoURL specifies the remote registry in
                              which this chart is located.
                            type: string
                          version:
                            description: Version specifies a particular version of
                              the chart.
                            type: string
                        type: object
                      type: array
                    commits:
                      description: Commits describes specific Git repository commits.
                      items:
                        description: GitCommit describes a specific commit from a
                          specific Git repository.
                        properties:
                          author:
                            description: Author is the git commit author
                            type: string
                          branch:
                            description: Branch denotes the branch of the repository
                              where this commit was found.
                            type: string
                          healthCheckCommit:
                            description: HealthCheckCommit is the ID of a specific
                              commit. When specified, assessments of Stage health
                              will used this value (instead of ID) when determining
                              if applicable sources of Argo CD Application resources
                              associated with the Stage are or are not synced to this
                              commit. Note that there are cases (as in that of Kargo
                              Render being utilized as a promotion mechanism) wherein
                              the value of this field may differ from the commit ID
                              found in the ID field.
                            type: string
                          id:
                            description: ID is the ID of a specific commit in the
                              Git repository specified by RepoURL.
                            type: string
                          message:
                            description: Message is the git commit message
                            type: string
                          repoURL:
                            description: RepoURL is the URL of a Git repository.
                            type: string
                        type: object
                      type: array
                    id:
                      description: ID is system-assigned value that is derived deterministically
                        from the contents of the Freight. i.e. Two pieces of Freight
                        can be compared for equality by comparing their IDs.
                      type: string
                    images:
                      description: Images describes specific versions of specific
                        container images.
                      items:
                        description: Image describes a specific version of a container
                          image.
                        properties:
                          digest:
                            description: Digest identifies a specific version of the
                              image in the repository specified by RepoURL. This is
                              a more precise identifier than Tag.
                            type: string
                          gitRepoURL:
                            description: GitRepoURL specifies the URL of a Git repository
                              that contains the source code for the image repository
                              referenced by the RepoURL field if Kargo was able to
                              infer it.
                            type: string
                          repoURL:
                            description: RepoURL describes the repository in which
                              the image can be found.
                            type: string
                          tag:
                            description: Tag identifies a specific version of the
                              image in the repository specified by RepoURL.
                            type: string
                        type: object
                      type: array
                    verificationResult:
                      description: VerificationInfo is information about any verification
                        process that was associated with this Freight for this Stage.
                      properties:
                        analysisRun:
                          description: AnalysisRunReference is a reference to an AnalysisRun.
                          properties:
                            name:
                              description: Name is the name of the AnalysisRun.
                              type: string
                            namespace:
                              description: Namespace is the namespace of the AnalysisRun.
                              type: string
                            phase:
                              description: Phase is the last observed phase of the
                                AnalysisRun referenced by Name.
                              type: string
                          required:
                          - name
                          - namespace
                          - phase
                          type: object
                      required:
                      - analysisRun
                      type: object
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration represents the .metadata.generation
                  that this Stage status was reconciled against.
                format: int64
                type: integer
              phase:
                description: Phase describes where the Stage currently is in its lifecycle.
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: kargo/crds/kargo.akuity.io_warehouses.yaml
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: warehouses.kargo.akuity.io
spec:
  group: kargo.akuity.io
  names:
    kind: Warehouse
    listKind: WarehouseList
    plural: warehouses
    singular: warehouse
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Warehouse is a source of Freight.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Spec describes sources of artifacts.
            properties:
              subscriptions:
                description: Subscriptions describes sources of artifacts to be included
                  in Freight produced by this Warehouse.
                items:
                  description: RepoSubscription describes a subscription to ONE OF
                    a Git repository, a container image repository, or a Helm chart
                    repository.
                  properties:
                    chart:
                      description: Chart describes a subscription to a Helm chart
                        repository.
                      properties:
                        name:
                          description: Name specifies a Helm chart to subscribe to
                            within the Helm chart registry specified by the RegistryURL
                            field. This field is required.
                          minLength: 1
                          type: string
                        registryURL:
                          description: RegistryURL specifies the URL of a Helm chart
                            registry. It may be a classic chart registry (using HTTP/S)
                            OR an OCI registry. This field is required.
                          minLength: 1
                          pattern: ^(((https?)|(oci))://)([\w\d\.\-]+)(:[\d]+)?(/.*)*$
                          type: string
                        semverConstraint:
                          description: SemverConstraint specifies constraints on what
                            new chart versions are permissible. This field is optional.
                            When left unspecified, there will be no constraints, which
                            means the latest version of the chart will always be used.
                            Care should be taken with leaving this field unspecified,
                            as it can lead to the unanticipated rollout of breaking
                            changes.
                          type: string
                      required:
                      - name
                      - registryURL
                      type: object
                    git:
                      description: Git describes a subscriptions to a Git repository.
                      properties:
                        branch:
                          description: Branch references a particular branch of the
                            repository. This field is optional. When not specified,
                            the subscription is implicitly to the repository's default
                            branch.
                          minLength: 1
                          pattern: ^\w+([-/]\w+)*$
                          type: string
                        repoURL:
                          description: URL is the repository's URL. This is a required
                            field.
                          minLength: 1
                          pattern: ^https://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$
                          type: string
                      required:
                      - repoURL
                      type: object
                    image:
                      description: Image describes a subscription to container image
                        repository.
                      properties:
                        allowTags:
                          description: AllowTags is a regular expression that can
                            optionally be used to limit the image tags that are considered
                            in determining the newest version of an image. This field
                            is optional.
                          type: string
                        gitRepoURL:
                          description: GitRepoURL optionally specifies the URL of
                            a Git repository that contains the source code for the
                            image repository referenced by the RepoURL field. When
                            this is specified, Kargo MAY be able to infer and link
                            to the exact revision of that source code that was used
                            to build the image.
                          pattern: ^https://(\w+([\.-]\w+)*@)?\w+([\.-]\w+)*(:[\d]+)?(/.*)?$
                          type: string
                        ignoreTags:
                          description: IgnoreTags is a list of tags that must be ignored
                            when determining the newest version of an image. No regular
                            expressions or glob patterns are supported yet. This field
                            is optional.
                          items:
                            type: string
                          type: array
                        platform:
                          description: Platform is a string of the form <os>/<arch>
                            that limits the tags that can be considered when searching
                            for new versions of an image. This field is optional.
                            When left unspecified, it is implicitly equivalent to
                            the OS/architecture of the Kargo controller. Care should
                            be taken to set this value correctly in cases where the
                            image referenced by this ImageRepositorySubscription will
                            run on a Kubernetes node with a different OS/architecture
                            than the Kargo controller. At present this is uncommon,
                            but not unheard of.
                          type: string
                        repoURL:
                          description: RepoURL specifies the URL of the image repository
                            to subscribe to. The value in this field MUST NOT include
                            an image tag. This field is required.
                          minLength: 1
                          pattern: ^(\w+([\.-]\w+)*(:[\d]+)?/)?(\w+([\.-]\w+)*)(/\w+([\.-]\w+)*)*$
                          type: string
                        semverConstraint:
                          description: SemverConstraint specifies constraints on what
                            new image versions are permissible. The value in this
                            field only has any effect when the TagSelectionStrategy
                            is SemVer or left unspecified (which is implicitly the
                            same as SemVer). This field is also optional. When left
                            unspecified, (and the TagSelectionStrategy is SemVer or
                            unspecified), there will be no constraints, which means
                            the latest semantically tagged version of an image will
                            always be used. Care should be taken with leaving this
                            field unspecified, as it can lead to the unanticipated
                            rollout of breaking changes. Refer to Image Updater documentation
                            for more details.
                          type: string
                        tagSelectionStrategy:
                          default: SemVer
                          description: TagSelectionStrategy specifies the rules for
                            how to identify the newest version of the image specified
                            by the RepoURL field. This field is optional. When left
                            unspecified, the field is implicitly treated as if its
                            value were "SemVer".
                          enum:
                          - Digest
                          - Lexical
                          - NewestBuild
                          - SemVer
                          type: string
                      required:
                      - repoURL
                      type: object
                  type: object
                minItems: 1
                type: array
            required:
            - subscriptions
            type: object
          status:
            description: Status describes the Warehouse's most recently observed state.
            properties:
              error:
                description: Error describes any errors that are preventing the Warehouse
                  controller from polling repositories to discover new Freight.
                type: string
              observedGeneration:
                description: ObservedGeneration represents the .metadata.generation
                  that this Warehouse was reconciled against.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
# Source: kargo/templates/api/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
---
# Source: kargo/templates/controller/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kargo-controller
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
---
# Source: kargo/templates/garbage-collector/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kargo-garbage-collector
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: garbage-collector
---
# Source: kargo/templates/webhooks-server/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kargo-webhooks-server
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
---
# Source: kargo/templates/api/secret.yaml
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
stringData:  
  ADMIN_ACCOUNT_PASSWORD_HASH: $2a$10$GO0EMvoTHeF326E21u4J0uO7mTIm/tCog2s5Weu.RuOKUBqiVUYdS  
  ADMIN_ACCOUNT_TOKEN_SIGNING_KEY: "iwishtowashmyirishwristwatch"
---
# Source: kargo/templates/api/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
data:
  KARGO_NAMESPACE: kargo
  LOG_LEVEL: INFO
  TLS_ENABLED: "true"
  TLS_CERT_PATH: /etc/kargo/tls.crt
  TLS_KEY_PATH: /etc/kargo/tls.key
  PERMISSIVE_CORS_POLICY_ENABLED: "false"
  ADMIN_ACCOUNT_ENABLED: "true"
  ADMIN_ACCOUNT_TOKEN_ISSUER: https://kargo.zeb17-int.duckdns.org
  ADMIN_ACCOUNT_TOKEN_AUDIENCE: kargo.zeb17-int.duckdns.org
  ADMIN_ACCOUNT_TOKEN_TTL: 24h
---
# Source: kargo/templates/controller/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-controller
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
data:
  LOG_LEVEL: INFO
  ARGOCD_NAMESPACE: argocd
  ARGOCD_ENABLE_CREDENTIAL_BORROWING: "true"
  ARGOCD_WATCH_ARGOCD_NAMESPACE_ONLY: "false"
---
# Source: kargo/templates/garbage-collector/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-garbage-collector
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: garbage-collector
data:
  LOG_LEVEL: INFO
  NUM_WORKERS: "3"
  MAX_RETAINED_PROMOTIONS: "20"
---
# Source: kargo/templates/webhooks-server/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kargo-webhooks-server
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
data:
  LOG_LEVEL: INFO
---
# Source: kargo/templates/api/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-api
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - create
      - get
      - list
      - watch
      - patch
      - update
      - delete
  - apiGroups:
      - ""
    resources:
      - serviceaccounts
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - authorization.k8s.io
    resources:
      - subjectaccessreviews
    verbs:
      - create
  - apiGroups:
      - kargo.akuity.io
    resources:
      - freights
    verbs:
      - get
      - list
      - patch
      - watch
      - delete
  - apiGroups:
      - kargo.akuity.io
    resources:
      - freights/status
    verbs:
      - update
      - patch
  - apiGroups:
      - kargo.akuity.io
    resources:
      - promotionpolicies
      - stages
      - warehouses
    verbs:
      - "*"
  - apiGroups:
      - kargo.akuity.io
    resources:
      - promotions
    verbs:
      - create
      - get
      - list
      - watch
      - patch
  - apiGroups:
      - kargo.akuity.io
    resources:
      # Needed for OpenShift
      - stages/finalizers
    verbs:
      - patch
      - update
---
# Source: kargo/templates/controller/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-controller
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - freights
  - promotions
  verbs:
  - create
  - get
  - list
  - watch
  - patch
- apiGroups:
  - kargo.akuity.io
  resources:
  - promotionpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - get
  - list
  - patch
  - promote
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - warehouses
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - freights/status
  - promotions/status
  - stages/status
  - warehouses/finalizers
  - warehouses/status
  verbs:
  - update
  - patch
- apiGroups:
  - argoproj.io
  resources:
  - analysistemplates
  verbs:
  - get
  - list
  - watch
---
# Source: kargo/templates/controller/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-controller-argocd
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups:
  - argoproj.io
  resources:
  - applications
  verbs:
  - get
  - list
  - patch
  - watch
- apiGroups:
  - argoproj.io
  resources:
  - analysisruns
  verbs:
  - create
  - get
  - list
  - watch
---
# Source: kargo/templates/garbage-collector/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-garbage-collector
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: garbage-collector
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
# The garbage collector cannot actually carry our promotions because it lacks
# permission to create Promotion resources, but having the custom promote verb
# on Stages allows it to delete Promotion resources associated with any Stage.
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - promote
- apiGroups:
  - kargo.akuity.io
  resources:
  - promotions
  verbs:
  - delete
  - get
  - list
  - watch
---
# Source: kargo/templates/user-roles/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-admin
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - rbac.authorization.k8s.io
  resources:
  - roles
  - rolebindings
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  - promotions
  - promotionpolicies
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - promote
---
# Source: kargo/templates/user-roles/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-developer
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - promotions
  - promotionpolicies
  verbs:
  - get
  - list
  - watch
---
# Source: kargo/templates/user-roles/cluster-roles.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-promoter
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
rules:
- apiGroups:
  - kargo.akuity.io
  resources:
  - promotions
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  - promotionpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - promote
---
# Source: kargo/templates/webhooks-server/cluster-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-webhooks-server
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
rules:
- apiGroups:
    - ""
  resources:
    - namespaces
  verbs:
    - get
    - list
    - watch
- apiGroups:
    - kargo.akuity.io
  resources:
    - freights
    - promotionpolicies
    - stages
  verbs:
    - get
    - list
    - watch
- apiGroups:
  - authorization.k8s.io
  resources:
  - subjectaccessreviews
  verbs:
  - create
---
# Source: kargo/templates/webhooks-server/cluster-role.yaml
# This cluster role is custom for the namespace controller. The namespace
# controller will not actually be able to carry our promotions because it lacks
# permission to create Promotion resources, but having the custom promote verb
# on Stages allows it to delete Promotion resources associated with any Stage
# when a namespace is deleted. Without this, the webhook would prevent that.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kargo-webhooks-server-ns-controller
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
rules:
- apiGroups:
  - kargo.akuity.io
  resources:
  - stages
  verbs:
  - promote
---
# Source: kargo/templates/api/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-api
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-api
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-api
---
# Source: kargo/templates/controller/cluster-role-bindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-controller
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-controller
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-controller
---
# Source: kargo/templates/controller/cluster-role-bindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-controller-argocd
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-controller-argocd
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-controller
---
# Source: kargo/templates/garbage-collector/cluster-role-bindings.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-garbage-collector
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: garbage-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-garbage-collector
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-garbage-collector
---
# Source: kargo/templates/webhooks-server/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-webhooks-server
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-webhooks-server
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-webhooks-server
---
# Source: kargo/templates/webhooks-server/cluster-role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kargo-webhooks-server-ns-controller
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kargo-webhooks-server-ns-controller
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: namespace-controller
---
# Source: kargo/templates/argocd/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kargo-controller
  namespace: argocd
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - list
  - watch
---
# Source: kargo/templates/argocd/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kargo-controller
  namespace: argocd
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kargo-controller
subjects:
- kind: ServiceAccount
  namespace: kargo
  name: kargo-controller
---
# Source: kargo/templates/api/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 443
    targetPort: 8080
  selector:
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/component: api
---
# Source: kargo/templates/webhooks-server/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kargo-webhooks-server
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
spec:
  type: ClusterIP
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/component: webhooks-server
---
# Source: kargo/templates/api/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kargo
      app.kubernetes.io/instance: kargo
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kargo
        app.kubernetes.io/instance: kargo
        app.kubernetes.io/component: api
      annotations:
        configmap/checksum: 4ae1fb26eef685f3b692cd658057512754f1bd124d3844bf21e19722768dc67b
        secret/checksum: 1a1e10ff7eb07f72ac221c09c2424d7d0431d0c42bbb6f5ea11b6537eeb801ad
    spec:
      serviceAccount: kargo-api
      containers:
        - name: api
          image: ghcr.io/akuity/kargo:v0.3.0
          imagePullPolicy: IfNotPresent
          command: ["/usr/local/bin/kargo", "api"]
          envFrom:
            - configMapRef:
                name: kargo-api
            - secretRef:
                name: kargo-api
          ports:
            - name: h2c
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/grpc_health_probe
                - -addr=:8080
                - -tls
                - -tls-no-verify
            initialDelaySeconds: 10
          readinessProbe:
            exec:
              command:
                - /usr/local/bin/grpc_health_probe
                - -addr=:8080
                - -tls
                - -tls-no-verify
            initialDelaySeconds: 5
          volumeMounts:
            - mountPath: /etc/kargo
              name: config
              readOnly: true
          resources:
            {}
      volumes:
        - name: config
          projected:
            sources:
              - secret:
                  name: kargo-api-cert
                  items:
                    - key: tls.crt
                      path: tls.crt
                    - key: tls.key
                      path: tls.key
---
# Source: kargo/templates/controller/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kargo-controller
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: kargo
      app.kubernetes.io/instance: kargo
      app.kubernetes.io/component: controller
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kargo
        app.kubernetes.io/instance: kargo
        app.kubernetes.io/component: controller
      annotations:
        configmap/checksum: d5c5056b1eecfc29af238bf8d9095435a2be0f040f7a225ce9a8b21c26e4caf2
    spec:
      serviceAccount: kargo-controller
      containers:
      - name: controller
        image: ghcr.io/akuity/kargo:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/kargo", "controller"]
        envFrom:
        - configMapRef:
            name: kargo-controller
        resources:
          {}
---
# Source: kargo/templates/webhooks-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kargo-webhooks-server
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: webhooks-server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: kargo
      app.kubernetes.io/instance: kargo
      app.kubernetes.io/component: webhooks-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kargo
        app.kubernetes.io/instance: kargo
        app.kubernetes.io/component: webhooks-server
      annotations:
        configmap/checksum: 3174e1e80ab0e39f24352645c4bc1099463c28425a9009bde96fcd4ab7348a19
    spec:
      serviceAccount: kargo-webhooks-server
      containers:
      - name: webhooks-server
        image: ghcr.io/akuity/kargo:v0.3.0
        imagePullPolicy: IfNotPresent
        command: ["/usr/local/bin/kargo", "webhooks-server"]
        envFrom:
        - configMapRef:
            name: kargo-webhooks-server
        ports:
        - containerPort: 9443
          name: webhooks-server
          protocol: TCP
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
        resources:
          {}
      volumes:
      - name: cert
        secret:
          defaultMode: 0644
          secretName: kargo-webhooks-server-cert
---
# Source: kargo/templates/garbage-collector/cron-job.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: kargo-garbage-collector
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: garbage-collector
spec:
  schedule: "0 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: kargo
        app.kubernetes.io/instance: kargo
        app.kubernetes.io/component: garbage-collector
      annotations:
        configmap/checksum: 2b318fcf578e7a7d3436ce80ab2f750f8f08cf52c60f64c49ff86d4cac026493
    spec:
      template:
        spec:
          serviceAccountName: kargo-garbage-collector
          containers:
          - name: garbage-collector
            image: ghcr.io/akuity/kargo:v0.3.0
            imagePullPolicy: IfNotPresent
            command: ["/usr/local/bin/kargo", "garbage-collector"]
            envFrom:
            - configMapRef:
                name: kargo-garbage-collector
            resources:
              {}
          restartPolicy: Never
---
# Source: kargo/templates/api/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
  annotations:
    cert-manager.io/cluster-issuer: cert-manager-webhook-duckdns-production
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
  - host: kargo.zeb17-int.duckdns.org
    http:
      paths:
      - pathType: ImplementationSpecific
        path: /
        backend:
          service:
            name: kargo-api
            port:
              number: 443
  tls:
  - hosts:
    - kargo.zeb17-int.duckdns.org
    secretName: kargo-api-ingress-cert
---
# Source: kargo/templates/api/cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kargo-api
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  dnsNames:
  - kargo.zeb17-int.duckdns.org
  issuerRef:
    kind: Issuer
    name: kargo-selfsigned-cert-issuer
  secretName: kargo-api-cert
---
# Source: kargo/templates/api/ingress-cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kargo-api-ingress
  namespace: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: api
spec:
  dnsNames:
  - kargo.zeb17-int.duckdns.org
  issuerRef:
    kind: Issuer
    name: kargo-selfsigned-cert-issuer
  secretName: kargo-api-ingress-cert
---
# Source: kargo/templates/webhooks-server/cert.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: kargo-webhooks-server
  namespace: kargo
spec:
  dnsNames:
  - kargo-webhooks-server.kargo.svc
  issuerRef:
    kind: Issuer
    name: kargo-selfsigned-cert-issuer
  secretName: kargo-webhooks-server-cert
---
# Source: kargo/templates/common/cert-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: kargo-selfsigned-cert-issuer
  namespace: kargo
spec:
  selfSigned: {}
---
# Source: kargo/templates/webhooks/webhooks.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  annotations:
    cert-manager.io/inject-ca-from: kargo/kargo-webhooks-server
webhooks:
- name: freight.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /mutate-kargo-akuity-io-v1alpha1-freight
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["freights"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
- name: promotion.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /mutate-kargo-akuity-io-v1alpha1-promotion
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["promotions"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
---
# Source: kargo/templates/webhooks/webhooks.yaml
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: kargo
  labels:
    helm.sh/chart: kargo-0.3.0
    app.kubernetes.io/name: kargo
    app.kubernetes.io/instance: kargo
    app.kubernetes.io/version: "v0.3.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  annotations:
    cert-manager.io/inject-ca-from: kargo/kargo-webhooks-server
webhooks:
- name: freight.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /validate-kargo-akuity-io-v1alpha1-freight
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["freights"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: promotion.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /validate-kargo-akuity-io-v1alpha1-promotion
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["promotions"]
    operations: ["CREATE", "UPDATE", "DELETE"]
  failurePolicy: Fail
- name: promotionpolicy.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /validate-kargo-akuity-io-v1alpha1-promotionpolicy
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["promotionpolicies"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
- name: stage.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /validate-kargo-akuity-io-v1alpha1-stage
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["stages"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail
- name: warehouse.kargo.akuity.io
  admissionReviewVersions: ["v1"]
  sideEffects: None
  clientConfig:
    service:
      namespace: kargo
      name: kargo-webhooks-server
      path: /validate-kargo-akuity-io-v1alpha1-warehouse
  rules:
  - scope: Namespaced
    apiGroups: ["kargo.akuity.io"]
    apiVersions: ["v1alpha1"]
    resources: ["warehouses"]
    operations: ["CREATE", "UPDATE"]
  failurePolicy: Fail

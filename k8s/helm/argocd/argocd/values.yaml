argo-cd:
  ## Argo Configs
  configs:
    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      resource.customizations.health.cert-manager.io_Certificate: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.conditions ~= nil then
            for i, condition in ipairs(obj.status.conditions) do
              if condition.type == "Ready" and condition.status == "False" then
                hs.status = "Degraded"
                hs.message = condition.message
                return hs
              end
              if condition.type == "Ready" and condition.status == "True" then
                hs.status = "Healthy"
                hs.message = condition.message
                return hs
              end
            end
          end
        end
        hs.status = "Progressing"
        hs.message = "Waiting for certificate"
        return hs

    # -- Repositories list to be used by applications
    ## Creates a secret for each key/value specified below to create repositories
    ## Note: the last example in the list would use a repository credential template, configured under "configs.credentialTemplates".
    repositories:
      zbialik-homelab-repo:
        url: https://github.com/zbialik/homelab.git
        name: zbialik-homelab
        type: git

    # Argo CD sensitive data
    # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
    secret:
      # -- Create the argocd-secret
      createSecret: false

  ## Application controller
  controller:
    resources:
    limits:
      cpu: 1.5
      memory: 1Gi
    requests:
      cpu: 1
      memory: 768Mi

  ## Dex
  dex:
    # -- Resource limits and requests for dex
    resources:
    limits:
      cpu: 50m
      memory: 64Mi
    requests:
      cpu: 5m
      memory: 32Mi

  ## Redis
  redis:
    ## Prometheus redis-exporter sidecar
    exporter:
      # -- Resource limits and requests for redis-exporter sidecar
      resources:
        limits:
          cpu: 50m
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 32Mi
    # -- Resource limits and requests for redis
    resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi

  ## Server
  server:
    # -- Resource limits and requests for the Argo CD server
    resources:
    limits:
      cpu: 1
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi
    ingress:
      # -- Enable an ingress resource for the Argo CD server
      enabled: true
      # -- Additional ingress annotations
      annotations:
        cert-manager.io/cluster-issuer: cert-manager-webhook-duckdns-production
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        # If you encounter a redirect loop or are getting a 307 response code
        # then you need to force the nginx ingress to connect to the backend using HTTPS.
        #
        nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      # -- Defines which ingress controller will implement the resource
      ingressClassName: nginx

      # -- List of ingress hosts
      ## Argo Ingress.
      ## Hostnames must be provided if Ingress is enabled.
      ## Secrets must be manually created in the namespace
      hosts:
      - argocd.zeb17-int.duckdns.org
      # -- Ingress TLS configuration
      tls:
      - hosts:
        - argocd.zeb17-int.duckdns.org
        secretName: argocd-cert

  ## Repo Server
  repoServer:
    # -- Resource limits and requests for the repo server pods
    resources:
    limits:
      cpu: 1
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  ## ApplicationSet controller
  applicationSet:
    # -- Resource limits and requests for the ApplicationSet controller pods.
    resources:
      limits:
        cpu: 150m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  ## Notifications controller
  notifications:
    # -- Enable notifications controller
    enabled: false
